Microsoft (R) Macro Assembler Version 11.00.61030.0	    01/13/17 13:02:54
main.asm						     Page 1 - 1


				;// Tyler Bradley
				;// CSIS-118BComp Org & Assem Lang Section 3888
				;// 29 May 2014
				;// FINAL
				;// This program takes a string entered by the user and prints out the characters in a chessboard with dimensions defined in the data section. Empty spaces are filled with '*'s and there is also an option to remove characters. All characters will be capitalised befor printing
				INCLUDE Irvine32.inc		;// Irvine's library that contains WriteString, WriteInt, and ReadInt
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				removeChars PROTO, String : ptr byte, numChar: dword, pos: dword ;//prototype for removeChars, lists its parameters
				capitalise PROTO, String: ptr byte ;//prototype for capitalise, lists its parameters
				concatenate PROTO, String : ptr byte, Stars: ptr byte, sMax: dword ;//prototype for concatenate, lists its parameters
				printRow PROTO, String : ptr byte, charsPerRow: dword, color1: dword, color2: dword, rSize: dword ;//prototype for printRow, lists its parameters
				WriteColorChar PROTO, String: ptr byte, fore: dword, back: dword ;//prototype for WriteColorChar, lists its parameters
				SetColor PROTO, fore:dword, back:dword ;//prototype for SetColor, lists its parameters

 00000000			.data						;// data segment. variables go here 

 = 00000080				max = 128 ;//max number for the array
 = 00000008				squares = 8; //number of squares in the chess board
 = 00000002				horizCharsPerSquare = 2; //number of characters per square

 00000000 50 6C 65 61 73		enterMsg byte "Please enter a string no longer than 128 characters",0ah,0dh,0 ;//null terminated string telling the user to enter a sentence
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 6E 6F 20
	   6C 6F 6E 67 65
	   72 20 74 68 61
	   6E 20 31 32 38
	   20 63 68 61 72
	   61 63 74 65 72
	   73 0A 0D 00
 00000036 44 6F 20 79 6F		replaceMsg byte "Do you want to remove some characters? (y/n) ",0 ;//null terminated string asking the user if they want to remove characters from their string
	   75 20 77 61 6E
	   74 20 74 6F 20
	   72 65 6D 6F 76
	   65 20 73 6F 6D
	   65 20 63 68 61
	   72 61 63 74 65
	   72 73 3F 20 28
	   79 2F 6E 29 20
	   00
 00000064 48 6F 77 20 6D		howMany byte "How many characters would you like to remove? ", 0 ;//null terminated string asking the user how many characters they would like to remove 
	   61 6E 79 20 63
	   68 61 72 61 63
	   74 65 72 73 20
	   77 6F 75 6C 64
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 72 65
	   6D 6F 76 65 3F
	   20 00
 00000093 53 74 61 72 74		startingMsg byte "Starting at which position? ",0 ;//null terminated string asking the user what position theyed like to start removing characters
	   69 6E 67 20 61
	   74 20 77 68 69
	   63 68 20 70 6F
	   73 69 74 69 6F
	   6E 3F 20 00
 000000B0 54 68 65 20 6C		lengthMsg byte "The length of then entered text is: ",0 ;//null terminated string telling the user how long the entered text is
	   65 6E 67 74 68
	   20 6F 66 20 74
	   68 65 6E 20 65
	   6E 74 65 72 65
	   64 20 74 65 78
	   74 20 69 73 3A
	   20 00
 000000D5 54 68 65 20 6C		lengthMsg2 byte "The length of the added text is: ",0;//null terminated string telling the user how long the added text is
	   65 6E 67 74 68
	   20 6F 66 20 74
	   68 65 20 61 64
	   64 65 64 20 74
	   65 78 74 20 69
	   73 3A 20 00
 000000F7 48 65 72 65 20		boardMsg byte "Here is the chess board: ",0ah,0dh,0 ;//null terminated string presenting the chess board
	   69 73 20 74 68
	   65 20 63 68 65
	   73 73 20 62 6F
	   61 72 64 3A 20
	   0A 0D 00

 00000113  00000081 [			inputText byte max+1 dup (0) ;//input text array
	    00
	   ]
 00000194  00000081 [			addText byte max+1 dup (0) ;//added text array, will be filled with stars
	    00
	   ]
 00000215 00000000			rPos dword ? ;//position to where to start removing characters
 00000219 00000000			rNum dword ? ;//number of characters to remove

 00000000			.code				;// code segment. all the instructions go here
 00000000			main PROC			;// main procedure or start point of the program
 00000000  E8 00000000 E		call Clrscr ;// clears whatever content is on the screen
 00000005  BA 00000000 R		mov edx, offset enterMsg ;// moves the offset of enterFirst message to the edx for use with WriteString
 0000000A  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen 
 0000000F  B9 00000080			mov ecx, max ;//moves the max number of the array to the ecx
 00000014  BA 00000113 R		mov edx, offset inputText ;//moves the begining of inputText to edx
 00000019  E8 00000000 E		call ReadString ;//retrieves a string from the keyboard
 0000001E  BA 00000036 R		mov edx, offset replaceMsg;//moves the begining of replaceMsg to edx
 00000023  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 00000028  E8 00000000 E		call ReadChar ;//retrieves a char from the keyboard, stores it in eax
 0000002D  E8 00000000 E		call WriteChar ;//prints the character value of al
 00000032  E8 00000000 E		call Crlf ;//prints a new line
 00000037  3C 79			cmp al, 'y' ;//cmp al to 'y'
 00000039  75 3E			jne noremove ;//if not equal to 'y' jump to noremove label
 0000003B  BA 00000064 R		mov edx, offset howMany ;//moves the begining of howMany to edx
 00000040  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 00000045  E8 00000000 E		call ReadInt ;//retrieve an int from the keyboard
 0000004A  A3 00000219 R		mov rNum, eax ;//moves the contents of eax to rNum
 0000004F  BA 00000093 R		mov edx, offset startingMsg ;//moves the begining of startingMsg to edx
 00000054  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 00000059  E8 00000000 E		call ReadInt ;//retrieves an int from the keyboard
 0000005E  A3 00000215 R		mov rPos, eax ;//moves the contents of eax to rPos
					invoke removeChars, addr inputText, rNum, rPos  ;//calls removeChars passing 3 parameters
					
 00000079			noremove:
 00000079  BA 00000113 R		mov edx, offset inputText ;//moves the begining of inputText to edx
 0000007E  E8 00000000 E		call StrLength ;//returns the length of whatever array is in edx to eax
					invoke capitalise, addr inputText ;//calls capitalise passing 1 parameter
					invoke concatenate, addr inputText, addr addText, max ;//calls concatenate passing 2 parameters
 000000A1  BA 000000B0 R		mov edx, offset lengthMsg ;//moves the begining of lengthMsg to edx
 000000A6  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 000000AB  E8 00000000 E		call WriteInt ;//prints signed decimal value of eax
 000000B0  E8 00000000 E		call Crlf ;//prints a new line
 000000B5  BA 000000D5 R		mov edx, offset lengthMsg2 ;//moves the begining of lengthMsg2 to edx
 000000BA  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 000000BF  BA 00000194 R		mov edx, offset addText ;//moves the begining of addText to edx
 000000C4  E8 00000000 E		call StrLength ;//returns teh length of whatever array is in edx to eax
 000000C9  E8 00000000 E		call WriteInt ;//prints signed decimal value of eax
 000000CE  E8 00000000 E		call Crlf ;//prints a new line
 000000D3  BA 000000F7 R		mov edx, offset boardMsg ;//moves the begining of boardMsg to edx
 000000D8  E8 00000000 E		call WriteString ;//prints the contents of the edx register to the screen
 000000DD  B8 00000008			mov eax, squares ;//moves the value squares to eax
 000000E2  BB 00000002			mov ebx, horizCharsPerSquare ;// movesthe value horizCharsPerSquare to ebx
 000000E7  BA 00000000			mov edx, 0 ;//clears edx
 000000EC  F7 F3			div ebx ;//divides eax by ebx
 000000EE  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 000000F0  B8 00000008			mov eax, squares ;//moves the value squares to eax
 000000F5  BB 00000002			mov ebx, 2 ;//moves 2 to ebx
 000000FA  F7 E3			mul ebx ;//multiplies eax by ebx
 000000FC  BA 00000113 R		mov edx, offset inputText ;//moves the begining of inputText to edx
 00000101			L1:
 00000101  51				push ecx ;//saves ecx
 00000102  50				push eax ;//saves eas
 00000103  B8 00000002			mov eax, horizCharsPerSquare ;// movesthe value horizCharsPerSquare to eax
 00000108  BB 00000002			mov ebx, 2 ;//moves 2 to ebx
 0000010D  52				push edx ;//saves edx
 0000010E  BA 00000000			mov edx, 0 ;//clears edx
 00000113  F7 F3			div ebx ;//divides eax by ebx
 00000115  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 00000117  5A				pop edx ;//restores edx
 00000118  58				pop eax ;//restores eax
 00000119			L2:
					invoke printRow, edx, horizCharsPerSquare, lightGray, white, squares ;//calls printRow passing 5 parameters
 00000127  03 D0			add edx, eax ;//adds contents of eax to edx
 00000129  E2 EE			loop L2 ;//jumps to L2 label, decrements ecx until ecx == 0
 0000012B  50				push eax ;//saves eax
 0000012C  B8 00000002			mov eax, horizCharsPerSquare ;// movesthe value horizCharsPerSquare to eax
 00000131  BB 00000002			mov ebx, 2 ;//moves 2 to ebx
 00000136  52				push edx ;//saves edx
 00000137  BA 00000000			mov edx, 0 ;//clears edx
 0000013C  F7 F3			div ebx ;//divides eax by ebx
 0000013E  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 00000140  5A				pop edx ;//restores edx
 00000141  58				pop eax ;//restores eax
 00000142			L3:
					invoke printRow, edx, horizCharsPerSquare, white, lightGray, squares ;//calls printRow passing 5 parameters
 00000150  03 D0			add edx, eax ;//adds contents of eax to edx
 00000152  E2 EE			loop L3 ;//jumps to L3 label, decrements ecx until ecx == 0
 00000154  59				pop ecx ;//restores ecx
 00000155  E2 AA			loop L1 ;//jumps to L1 label, decrements ecx until ecx == 0
					invoke SetColor, lightGray, black ;//calls SetColor passing 2 parameters
				    exit		; // calls the microsoft exit function
 00000167			main ENDP		; // ends the main procedure

 00000167			removeChars PROC, String : ptr byte, numChar: dword, pos: dword ;//begins procedure, lists parameters
 0000016A  60				pushad ;//pushes all registers onto the stack
 0000016B  8B 7D 08			mov edi, String			;//moves the array offset to the edi
 0000016E  03 7D 10			add edi, pos ;//adds pos to edi
 00000171  8B F7			mov esi, edi ;//moves contents of edi to esi
 00000173  03 75 0C			add esi, numChar ;//adds numChar to edi
 00000176  8B 55 08			mov edx, String ;//moves the array offset to the edi
 00000179  E8 00000000 E		call StrLength ;//returns the length of whatever array is in the edx
 0000017E  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 00000180  2B 4D 10			sub ecx, pos ;//subtracts pos from ecx
 00000183  2B 4D 0C			sub ecx, numChar ;//subtracts numChar from ecx
 00000186			L1:
 00000186  8B 16			mov edx, [esi]			;//moves edx what esi is pointing at
 00000188  88 17			mov [edi], dl ;//moves whats in dl to what edi is pointing at
 0000018A  47				inc edi ;//increments edi
 0000018B  46				inc esi ;//increments esi
 0000018C  E2 F8			loop L1 ;//jumps to L1 label, decrements ecx until ecx == 0
 0000018E  8B 4D 0C			mov ecx, numChar ;//moves numChar to ecx
 00000191  B8 00000000			mov eax, 0 ;//clears eax
 00000196			L2:
 00000196  88 07			mov [edi], al ;//moves whats in al to what edi is pointing at
 00000198  47				inc edi ;//increments edi
 00000199  E2 FB			loop L2 ;//jumps to L2 label, decrements ecx until ecx == 0

 0000019B  61				popad ;//pops all registers onto the stack
					ret ;// returns to where the procedure was called
 000001A0			removeChars ENDP ;//ends the procedure
 000001A0			capitalise PROC, String: ptr byte ;//begins procedure, lists parameters
 000001A3  60				pushad ;//pushes all registers onto the stack

 000001A4  8B 55 08			mov edx, String ;//moves the array offset to the edi
 000001A7  E8 00000000 E		call StrLength ;//returns the length of whatever array is in edx to eax
 000001AC  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 000001AE			L1:
 000001AE  8A 1A			mov bl, [edx] ;//moves to the bl what edx is pointing at
 000001B0  80 FB 60			cmp bl, 96 ;//compares bl to 'a'
 000001B3  72 0A			jb skip ;//if its less than 96 skip it
 000001B5  80 FB 7A			cmp bl, 122 ;//compares bl to 'z'
 000001B8  77 05			ja skip ;//if its greater than 122 skip it
 000001BA  80 EB 20			sub bl, 32 ;//subtracts 32 from bl
 000001BD  88 1A			mov [edx], bl ;//moves whats in bl to what edx is pointing at
 000001BF			skip:
 000001BF  42				inc edx ;//increments edx
 000001C0  E2 EC			loop L1 ;//jumps to L1 label, decrements ecx until ecx == 0

 000001C2  61				popad ;//pops all registers onto the stack
					ret ;// returns to where the procedure was called
 000001C7			capitalise ENDP ;//ends the procedure

 000001C7			concatenate PROC, String : ptr byte, Stars: ptr byte, sMax: dword ;//begins procedure, lists parameters
 000001CA  60				pushad ;//pushes all registers onto the stack
 000001CB  8B 55 08			mov edx, String ;//moves the array offset to the edi
 000001CE  E8 00000000 E		call StrLength ;//returns the length of whatever array is in edx to eax
 000001D3  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 000001D5  3B 4D 10			cmp ecx, sMax ;//cmps ecx to sMax
 000001D8  7D 22			jge done ;//if its greater than or equal to sMax then we are done
 000001DA  50				push eax ;//saves eax
 000001DB  8B 45 10			mov eax, sMax;//moves sMax to the eax
 000001DE  2B C1			sub eax, ecx ;//subtracts ecx from eax
 000001E0  8B C8			mov ecx, eax ;//moves contents of eax to ecx
 000001E2  8B 5D 0C			mov ebx, Stars ;//moves the offset of Stars to ebx
 000001E5  51				push ecx ;// saves ecx
 000001E6  B0 2A			mov al, '*' ;//moves '*' to the al
 000001E8			L1:
 000001E8  88 03			mov [ebx], al ;//move whats in the al to what ebx is pointing at
 000001EA  43				inc ebx ;//increments ebx
 000001EB  E2 FB			loop L1 ;//jumps to L1 label, decrements ecx until ecx == 0
 000001ED  8B 5D 0C			mov ebx, Stars ;//moves the offset of Stars to ebx
 000001F0  59				pop ecx ;//restores ecx
 000001F1  58				pop eax ;//restores eax
 000001F2  03 D0			add edx, eax ;// adds eax to edx
 000001F4			L2:
 000001F4  8A 03			mov al, [ebx] ;// moves to the al what ebx is pointing at
 000001F6  88 02			mov [edx], al ;// moves to what edx is pointing whats in the al
 000001F8  43				inc ebx ;//increments ebx
 000001F9  42				inc edx ;//increments edx
 000001FA  E2 F8			loop L2 ;//jumps to L2 label, decrements ecx until ecx == 0
 000001FC			done:
 000001FC  61				popad ;//pops all registers onto the stack
					ret ;// returns to where the procedure was called
 00000201			concatenate ENDP ;//ends the procedure

 00000201			printRow PROC, String : ptr byte, charsPerRow: dword, color1: dword, color2: dword, rSize: dword ;//begins procedure, lists parameters
 00000204  60				pushad ;//pushes all registers onto the stack
 00000205  8B 45 18			mov eax, rSize ;//moves rSize to the eax
 00000208  BA 00000000			mov edx, 0 ;//clears edx
 0000020D  F7 75 0C			div charsPerRow ;//divides eax by charsPerRow
 00000210  8B C8			mov ecx, eax ;//moves contents of eax to ecx  
 00000212  8B 55 08			mov edx, String ;//moves the array offset to the edi
 00000215			L1:
 00000215  51				push ecx ;//saves ecx
 00000216  8B 4D 0C			mov ecx, charsPerRow ;//moves charsPerRow to the ecx
 00000219			L2:
					invoke WriteColorChar, edx, color1, color2 ;//calls WriteColorChar passing 3 parameters
 00000225  42				inc edx ;//increments edx
 00000226  E2 F1			loop L2 ;//jumps to L2 label, decrements ecx until ecx == 0
 00000228  8B 4D 0C			mov ecx, charsPerRow ;//moves CharsPerRow to the ecx
 0000022B			L3:
					invoke WriteColorChar, edx, color2, color1 ;//calls WriteColorChar passing 3 parameters
 00000237  42				inc edx ;//increments edx
 00000238  E2 F1			loop L3 ;//jumps to L3 label, decrements ecx until ecx == 0
 0000023A  59				pop ecx ;//restores ecx
 0000023B  E2 D8			loop L1 ;//jumps to L1 label, decrements ecx until ecx == 0
 0000023D  E8 00000000 E		call Crlf ;//prints a new line
					
 00000242  61				popad ;//pops all registers onto the stack
					ret ;// returns to where the procedure was called
 00000247			printRow ENDP ;//ends the procedure
 00000247			WriteColorChar PROC, String: ptr byte, fore: dword, back: dword ;//begins procedure, lists parameters
 0000024A  60				pushad ;//pushes all registers onto the stack
 0000024B  8B 55 08			mov edx, String ;//moves the array offset to the edi
					invoke SetColor, fore, back ;//calls SetColor passing 2 parameters
 00000259  8A 02			mov al, [edx] ;//moves what edx is pointing at to the al
 0000025B  E8 00000000 E		call WriteChar ;//prints a character to the screen

 00000260  61				popad ;//pops all registers onto the stack
					ret ;// returns to where the procedure was called
 00000265			WriteColorChar ENDP ;//ends the procedure
 00000265			SetColor PROC, fore:dword, back:dword ;//begins procedure, lists parameters
 00000268  60				 pushad ;//pushes all registers onto the stack
 00000269  8B 45 0C			 mov eax, back ;//moves back to the eax
 0000026C  BB 00000010			 mov ebx, 16 ;//moves 16 to the ebx
 00000271  F7 E3			 mul ebx ;//multipies eax by ebx
 00000273  03 45 08			 add eax, fore ;//adds fore to the eax
 00000276  E8 00000000 E		 call SetTextColor ;//sets the foreground and background color of texts output to the screeen
					 
 0000027B  61				 popad ;//pops all registers onto the stack
				   	 ret ;// returns to where the procedure was called
 00000280			SetColor ENDP ;//ends the procedure

				END main		; // ends the program
Microsoft (R) Macro Assembler Version 11.00.61030.0	    01/13/17 13:02:54
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000021D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000280 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 00000265 _TEXT	Length= 0000001B Public STDCALL
  fore . . . . . . . . . . . . .	DWord	 bp + 00000008
  back . . . . . . . . . . . . .	DWord	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteColorChar . . . . . . . . .	P Near	 00000247 _TEXT	Length= 0000001E Public STDCALL
  String . . . . . . . . . . . .	DWord	 bp + 00000008
  fore . . . . . . . . . . . . .	DWord	 bp + 0000000C
  back . . . . . . . . . . . . .	DWord	 bp + 00000010
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
capitalise . . . . . . . . . . .	P Near	 000001A0 _TEXT	Length= 00000027 Public STDCALL
  String . . . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 000001AE _TEXT	
  skip . . . . . . . . . . . . .	L Near	 000001BF _TEXT	
concatenate  . . . . . . . . . .	P Near	 000001C7 _TEXT	Length= 0000003A Public STDCALL
  String . . . . . . . . . . . .	DWord	 bp + 00000008
  Stars  . . . . . . . . . . . .	DWord	 bp + 0000000C
  sMax . . . . . . . . . . . . .	DWord	 bp + 00000010
  L1 . . . . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001F4 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001FC _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000167 Public STDCALL
  noremove . . . . . . . . . . .	L Near	 00000079 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000101 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000119 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000142 _TEXT	
printRow . . . . . . . . . . . .	P Near	 00000201 _TEXT	Length= 00000046 Public STDCALL
  String . . . . . . . . . . . .	DWord	 bp + 00000008
  charsPerRow  . . . . . . . . .	DWord	 bp + 0000000C
  color1 . . . . . . . . . . . .	DWord	 bp + 00000010
  color2 . . . . . . . . . . . .	DWord	 bp + 00000014
  rSize  . . . . . . . . . . . .	DWord	 bp + 00000018
  L1 . . . . . . . . . . . . . .	L Near	 00000215 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000219 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000022B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
removeChars  . . . . . . . . . .	P Near	 00000167 _TEXT	Length= 00000039 Public STDCALL
  String . . . . . . . . . . . .	DWord	 bp + 00000008
  numChar  . . . . . . . . . . .	DWord	 bp + 0000000C
  pos  . . . . . . . . . . . . .	DWord	 bp + 00000010
  L1 . . . . . . . . . . . . . .	L Near	 00000186 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000196 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addText  . . . . . . . . . . . .	Byte	 00000194 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boardMsg . . . . . . . . . . . .	Byte	 000000F7 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterMsg . . . . . . . . . . . .	Byte	 00000000 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
horizCharsPerSquare  . . . . . .	Number	 00000002h   
howMany  . . . . . . . . . . . .	Byte	 00000064 _DATA	
inputText  . . . . . . . . . . .	Byte	 00000113 _DATA	
lengthMsg2 . . . . . . . . . . .	Byte	 000000D5 _DATA	
lengthMsg  . . . . . . . . . . .	Byte	 000000B0 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max  . . . . . . . . . . . . . .	Number	 00000080h   
rNum . . . . . . . . . . . . . .	DWord	 00000219 _DATA	
rPos . . . . . . . . . . . . . .	DWord	 00000215 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
replaceMsg . . . . . . . . . . .	Byte	 00000036 _DATA	
squares  . . . . . . . . . . . .	Number	 00000008h   
startingMsg  . . . . . . . . . .	Byte	 00000093 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
