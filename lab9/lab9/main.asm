;// Tyler Bradley
;// CSIS-118BComp Org & Assem Lang Section 3888
;// 1 April 2014
;// Lab 9
;// This program uses conditional jumps to loop through a number guessing game until the player decides not to continue or until the player runs out of money
INCLUDE Irvine32.inc		;// Irvine's library that contains WriteString, WriteInt, and ReadInt

.data						;// data segment. variables go here 
	bankMsg byte "Your bank is $",0 ;//null terminated string that tells the user how much they have in the bank
	inMsg byte "Please enter your guess for the roll.",0dh,0ah,"It costs $1.00 to play, if you are correct I will pay $10.00. Enter a guess: ",0dh,0ah, 0 ;//null terminated string that informs the user of the rules.
	lossMsg byte "Sorry, the dice rolled a ",0 ;//null terminate string that tells the user they lost
	contMsg byte ". Continue? y or n",0dh,0ah,0 ;//null terminated string that asks the user if they want to continue
	winMsg byte "Winner! The dice rolled a ",0 ;//null terminated string informing the user they have won
	byeMsg byte "Thank you for playing ",0 ;//null terminated string that thanks the user for playing
	
	.code		;// code segment. all the instructions go here
main PROC		;// main procedure or start point of the program
	call Clrscr ;// clears whatever content is on the screen
	mov ebx, 10 ;//moves 10 to the ebx to start the player's bank with $10
	call GetRoll ;//calls the user created get roll procedure to get guesses from what the roll of a die will be
    exit		; // calls the microsoft exit function
main ENDP		; // ends the main procedure

GetRoll PROC ;// user defined procedure that will use DisplayMenu to give the user options of what to do, retrieves the option using ReadInt, and calls the appropriate procedure using conditional jumps. Then loops over until the user chooses to exit
push eax ;//pushes the eax to the top of the stack
push ebx ;//pushes the ebx to the top of the stack
push edx ;//pushes the edx to the top of the stack
push esi ;//pushes the esi to the top of the stack

jmp get ;//jumps to the get label towards the bottom of the procedure
top: ;//label signifying the begining of the procedure
mov eax, 6 ;//moves 6 to the eax register so that a random number from 0 to 5 will be generated by RandomRange
call Randomize ;//seeds the random number generator
call RandomRange ;//produces a random number between 0 and 5 and places it in the eax
inc eax ;//adds one to the eax making the range of random numbers between 1 and 6
cmp esi, eax ;//compares the two register to see if the guess is equal to the number rolled
je winner ;//if the guess and the roll are equal, jumps to the winner label
sub ebx, 1 ;//subtracts 1 from ebx or $1 from the bank
mov edx, offset lossMsg ;//moves the beginning to the lossMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen
call WriteDec ;//prints the decimal value of the eax to the screen
jmp again ;//jumps to the again label
winner: ;//a jump to this label occurs if the guess is correct. Will add $10 to the bank
add ebx, 10 ;//adds 10 to the ebx or $10 to the bank
mov edx, offset winMsg ;//moves the begining of the winMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen

call WriteDec ;//prints the decimal value of the eax to the screen
again: ;//a jump to this label will ask the user if they would like to continue
mov edx, offset contMsg ;//moves the beginning of the contMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen
call ReadChar ;//retreives a single character from the keyboard
cmp al, "n" ;//compares the character retrieved from ReadChar to an 'n' character
je gameover ;//if the characters are equal then it will jump to the game over label
get: ;//a jump to this label gets the guess for the roll
mov eax, ebx ;//moves to the eax the value in ebx (the bank)
mov edx, offset bankMsg ;//moves the beginning of the bankMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen
call WriteDec ;//prints the decimal value of the eax to the screen
call Crlf ;//creates a carriage return line feed pair (a new line)
mov edx, offset inMsg ;//moves the beginning of the inMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen
call ReadInt
mov esi, eax
jmp top ;//jumps back to the top label effectivly creating a loop
gameover: ;//a jump to this label will return
mov edx, offset byeMsg ;//moves the offset of the byeMsg to thank the user for playing
call WriteString ;//prints the contents of the edx register to the screen
mov edx, offset bankMsg ;//moves the beginning of the bankMsg to the edx for use with WriteString
call WriteString ;//prints the contents of the edx register to the screen
mov eax, ebx
call WriteDec ;//prints the decimal value of the eax to the screen
call Crlf

pop esi ;//pops the esi from the top of the stack
pop edx ;//pops the edx from the top of the stack
pop ebx ;//pops the ebx from the top of the stack
pop eax ;//pops the eax from the top of the stack
ret ;// returns to where the function was called
GetRoll ENDP ;//ends the GetChoice procedure




END main		; // ends the program
